{"version":3,"sources":["types/project.ts","types/entity.ts","services/dbService.ts","services/dataService.ts","components/ProjectEdit/ProjectEdit.tsx","components/Home/Home.tsx","types/symbol.ts","types/viewType.ts","types/stitch.ts","components/reducer.ts","services/localStorageService.ts","components/Store.tsx","types/zoom.ts","services/colorService.ts","components/Scroll/Scroll.tsx","components/Child.tsx","components/Canvas/Canvas.tsx","components/Panel/Panel.tsx","components/Palette/Palette.tsx","types/thread.ts","components/PaleteEdit/PaletteEdit.tsx","components/RightPanel/LeftPanel.tsx","components/ViewToolBar/ViewToolBar.tsx","types/backColors.ts","components/ImageEdit/ImageEdit.tsx","components/BackPanel/BackToolBar.tsx","components/TopPanel/TopPanel.tsx","components/Editor/Editor.tsx","components/App.tsx","index.tsx"],"names":["Project","name","grid","palette","height","width","color","picture","id","createdAt","Date","getTime","updatedAt","object","Object","keys","forEach","key","this","DbService","schema","version","idbFactory","window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","Error","Promise","resolve","reject","request","open","onerror","onsuccess","event","target","result","onupgradeneeded","console","log","db","table","createObjectStore","keyPath","transaction","objectStore","tables","projectService","className","dbService","tableNames","map","cls","store","get","entity","uuid","put","delete","getAll","then","res","import","fn","ProjectEdit","useParams","useState","project","setProject","history","useHistory","onChangeHandler","prop","value","useEffect","onChange","e","type","parseInt","onClick","save","push","to","Home","projects","setProjects","list","createdAtDate","updatedAtDate","toLocaleString","symbolTypes","viewTypes","stitchTypes","actionTypes","initialState","zoom","scale","scrollX","scrollY","stitchType","symbol","view","mainReducer","state","action","localStorageService","prefix","localStorage","getItem","setItem","_get","removeItem","defaultValue","obj","JSON","parse","hasOwnProperty","_put","stringify","time","now","has","StoreContext","React","createContext","DispatchContext","Store","children","useReducer","dispatch","actionList","useMemo","setZoom","setSymbol","setStitchType","setView","Provider","zoomSettings","colorService","hex","bw","indexOf","slice","length","r","g","b","toString","padZero","str","getHexContrast","strRgbToHex","match","exec","rgbToHex","len","zeros","Array","join","c","componentToHex","Scroll","horizontal","size","onScroll","scroll","ref","useRef","document","createElement","overflow","current","style","Child","Canvas","wheelTimeOut","onCellClick","useContext","setSize","zoomed","useCallback","number","Math","floor","scrolledX","scrolledY","cellSize","aidaImgEl","querySelector","counterImgEl","image","data","Image","src","resize","parent","parentElement","offsetHeight","offsetWidth","clickHandler","contextMenu","preventDefault","refRect","getBoundingClientRect","cellX","pageX","left","rowY","pageY","top","cellIndex","rowIndex","direction","drawCells","ctx","colIndex","cell","zX","zY","cellHeight","cellWidth","strRgbContrast","stitch","split","fillStyle","fillRect","drawCell","drawAll","getContext","clearRect","i","j","drawImage","drawBackGround","globalAlpha","opacity","sWidth","sHeight","drawPicture","strokeStyle","strokeStyleBold","lineWidth","beginPath","moveTo","lineTo","stroke","drawGrid","scrollHandler","x","currentTarget","addEventListener","removeEventListener","onWheel","clearTimeout","shiftKey","altKey","deltaY","setTimeout","delta","newScale","min","max","maxScrollX","newScrollX","maxScrollY","newScrollY","onContextMenu","Panel","vertical","border","Palette","onDoubleClick","selectedSymbol","sort","a","threadA","threadB","index","thread","contrastColor","borderColor","backgroundColor","selected","title","vendor","vendors","anchor","t","dmc","gamma","maderia","PaletteEdit","onSave","onCancel","onDelete","setVendor","search","setSearch","selectedThread","setThread","threads","filter","placeholder","confirm","LeftPanel","modalOpened","setModalOpened","editSymbol","setEditSymbol","Modal","show","onHide","Body","ViewToolBar","currentView","ButtonGroup","viewType","Button","active","backColors","ImageEdit","setPicture","lock","setLock","aspect","maxSize","changeSize","newSize","Form","Group","File","accept","label","file","files","reader","FileReader","onload","readAsDataURL","Check","checked","Label","Control","BackToolBar","onChangeColor","onChangePicture","colorRef","colorCustomRef","modal","setModal","Overlay","placement","rootClose","props","colors","disableAlpha","onChangeComplete","TopPanel","Editor","deleteCell","newStitch","clickDirection","newPalette","newGrid","App","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b8eaae05.chunk.js","sourcesContent":["import {Entity} from \"./entity\";\r\nimport {PaletteType} from \"./paletteType\";\r\nimport {Cell} from \"./cell\";\r\n\r\nexport class Project extends Entity {\r\n    name: string = 'new Project';\r\n    grid: GridType = {};\r\n    palette: PaletteType = {};\r\n    height: number = 100;\r\n    width: number = 100;\r\n    color: string = '#fff';\r\n    picture?: Picture;\r\n}\r\n\r\nexport interface Picture {\r\n    opacity: number;\r\n    left: number,\r\n    top: number,\r\n    height: number,\r\n    sHeight: number,\r\n    width: number,\r\n    sWidth: number,\r\n    data?: string;\r\n}\r\n\r\n\r\nexport type GridType = { [key: number]: { [key: number]: Cell } };\r\n","export class Entity {\r\n    id?: string;\r\n    createdAt: number = new Date().getTime();\r\n    updatedAt: number = new Date().getTime();\r\n\r\n    import(object: any) {\r\n        Object.keys(object).forEach(key => {\r\n            // @ts-ignore\r\n            this[key] = object[key];\r\n        })\r\n        return this;\r\n    }\r\n}\r\n","export class DbService {\r\n\r\n    idbFactory: IDBFactory;\r\n\r\n    constructor(private name: string, private schema: string[], private version: number) {\r\n        // @ts-ignore\r\n        this.idbFactory = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n        if (!this.idbFactory) {\r\n            throw  new Error(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\r\n        }\r\n    }\r\n\r\n    open(): Promise<IDBDatabase> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = this.idbFactory.open(this.name, this.version);\r\n            request.onerror = () => new Error('You need to allow database');\r\n            request.onsuccess = (event: any) => {\r\n                resolve(event.target.result);\r\n            }\r\n            request.onupgradeneeded = (event: any) => {\r\n                console.log('onupgradeneeded');\r\n                const db = event.target.result;\r\n                this.schema.forEach(table => {\r\n                    db.createObjectStore(table, {keyPath: 'id'})\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    async store(name: string): Promise<IDBObjectStore> {\r\n        const db = await this.open();\r\n        return db.transaction(name, 'readwrite').objectStore(name);\r\n    }\r\n}\r\n","import {DbService} from \"./dbService\";\r\nimport {Project} from \"../types/project\";\r\nimport {Entity} from \"../types/entity\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\nconst tables = [\r\n    Project\r\n]\r\n\r\nconst DB_VERSION = 2;\r\nconst DB_NAME = 'stitch';\r\n\r\nexport class DataService<T extends Entity> {\r\n\r\n    dbService: DbService;\r\n\r\n    constructor(private className: any) {\r\n        const tableNames = tables.map(cls => cls.name);\r\n        this.dbService = new DbService(DB_NAME, tableNames, DB_VERSION);\r\n    }\r\n\r\n    async get(id: string): Promise<T> {\r\n        return this.request<T>((store) => store.get(id))\r\n    }\r\n\r\n    async save(entity: T): Promise<string> {\r\n        if (!entity.id) {\r\n            entity.id = uuid();\r\n        }\r\n        entity.updatedAt = new Date().getTime()\r\n        return this.request((store) => store.put(entity))\r\n    }\r\n\r\n    async delete(entity: T): Promise<T> {\r\n        return this.request((store) => store.delete(entity.id as string))\r\n    }\r\n\r\n    async list(): Promise<T[]> {\r\n        return this.request<T[]>((store) => store.getAll()).then(res => res.map(entity => {\r\n            return (new this.className()).import(entity)\r\n        }))\r\n    }\r\n\r\n    async request<T = void>(fn: (store: IDBObjectStore) => IDBRequest): Promise<T> {\r\n        const store = await this.dbService.store(this.className.name)\r\n        return new Promise(res => fn(store).onsuccess = (event: any) => res(event.target.result))\r\n    }\r\n}\r\n\r\nexport const projectService = new DataService<Project>(Project)\r\n","import React, {FunctionComponent, useEffect, useState} from 'react';\r\nimport {useParams, useHistory, Link} from 'react-router-dom';\r\nimport {Project} from \"../../types/project\";\r\nimport {projectService} from \"../../services/dataService\";\r\n\r\nexport const ProjectEdit: FunctionComponent = () => {\r\n    const {id} = useParams();\r\n    const [project, setProject] = useState<Project>(new Project());\r\n    const history = useHistory();\r\n\r\n    function onChangeHandler(prop: string, value: any) {\r\n        setProject({...project, [prop]: value} as Project)\r\n    }\r\n\r\n\r\n    function save() {\r\n        projectService.save(project).then(id => {\r\n            history.push(`/draw/${id}`)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            projectService.get(id).then(res => setProject(res));\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label>Project</label>\r\n                <input value={project.name} onChange={e => onChangeHandler('name', e.target.value)}/>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Height (stitches)</label>\r\n                <input type=\"number\" value={project.width}\r\n                       onChange={e => onChangeHandler('width', parseInt(e.target.value))}/>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Height (stitches)</label>\r\n                <input type=\"number\" value={project.height}\r\n                       onChange={e => onChangeHandler('height', parseInt(e.target.value))}/>\r\n            </div>\r\n\r\n            <button onClick={e => save()}>{project.id ? 'Save' : 'Create'}</button>\r\n            <Link to={(project.id ? `/draw/${project.id}` : '')}>Cancel</Link>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {projectService} from \"../../services/dataService\";\r\nimport {Project} from \"../../types/project\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport function Home() {\r\n\r\n    const [projects, setProjects] = useState<Project[]>([]);\r\n\r\n    useEffect(() => {\r\n        projectService.list().then(setProjects)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Link to={'/edit'}>new</Link>\r\n            Recent projects:\r\n            <ul>\r\n                {projects.map((project,key) => {\r\n                    const createdAtDate = new Date(project.createdAt);\r\n                    const updatedAtDate = new Date(project.updatedAt);\r\n                    return (<Link to={`/draw/${project.id}`} key={key}>\r\n                        <li>{project.name} createdAt: {createdAtDate.toLocaleString()} | updatedAt: {updatedAtDate.toLocaleString()}</li>\r\n                    </Link>)\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","export const symbolTypes = [\r\n    '♥', '♣', '♠', '○',\r\n    '◙', '☼', '▲', '▼', '#',\r\n    '$', '●', '■', '◊', '□',\r\n    '♦', '♪', '☻', '♫', 'ↄ',\r\n    '¤', '©', '®', '&', '€',\r\n    '℗', '₿', 'Ω', '∆', '∑',\r\n    '₽', '≈', '╦', '╩', '╬',\r\n    '◘', '◄', '►', 'Ɐ', 'Ꝋ',\r\n    'Ꞝ', 'Ꞷ', 'ⱥ', '∞', '∂',\r\n    '₮', '₭', '₾', '≠', '≡'\r\n]\r\n\r\nexport type SymbolType = typeof symbolTypes[number]\r\n","export const viewTypes = ['aida', 'count', 'grid', 'none'];\r\n\r\nexport type ViewType = typeof viewTypes[number];\r\n","export interface Stitch {\r\n    direction: Direction\r\n    type: StitchType;\r\n}\r\n\r\nexport const stitchTypes = [\r\n    'x', 'vx', 'hx', 'sx', 'qx', '3qx', '\\\\', '/'\r\n]\r\n\r\nexport type StitchType = typeof stitchTypes[number]\r\n\r\nexport type Direction = 'r' | 'l' | 't' | 'b' | 'tr' | 'tl' | 'br' | 'bl' | 'f';\r\n","import {StoreType} from \"./Store\";\r\nimport {symbolTypes} from \"../types/symbol\";\r\nimport {viewTypes} from \"../types/viewType\";\r\nimport {stitchTypes} from \"../types/stitch\";\r\n\r\nexport const actionTypes = {\r\n    SET_ZOOM: 'SET_ZOOM',\r\n    SET_SYMBOL: 'SET_SYMBOL',\r\n    SET_STITCH_TYPE: 'SET_STITCH_TYPE',\r\n    SET_VIEW: 'SET_VIEW',\r\n};\r\n\r\nexport const initialState: StoreType = {\r\n    zoom: {scale: 1, scrollX: 0, scrollY: 0},\r\n    stitchType: stitchTypes[0],\r\n    symbol: symbolTypes[0],\r\n    view: viewTypes[0]\r\n};\r\n\r\nexport function mainReducer(state: StoreType, action: { type: string, value: any }) {\r\n    switch (action.type) {\r\n        case actionTypes.SET_ZOOM:\r\n            return {...state, zoom: action.value};\r\n        case actionTypes.SET_SYMBOL:\r\n            return {...state, symbol: action.value};\r\n        case actionTypes.SET_STITCH_TYPE:\r\n            return {...state, stitchType: action.value};\r\n        case actionTypes.SET_VIEW:\r\n            return {...state, view: action.value};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export default class LocalStorageService {\n    prefix = '';\n\n    constructor(prefix = '') {\n        this.prefix = prefix + '_'\n    }\n\n    _get(name: string) {\n        return localStorage.getItem(this.prefix + name) as any\n    }\n\n    _put(name: string, value: any) {\n        localStorage.setItem(this.prefix + name, value);\n    }\n\n    has(name: string) {\n        return this._get(name) !== null\n    }\n\n    remove(name: string) {\n        localStorage.removeItem(this.prefix + name);\n    }\n\n    get(name: string, defaultValue?: any) {\n        let obj = JSON.parse(this._get(name));\n        return (obj && obj.hasOwnProperty('value')) ? obj.value : defaultValue;\n    }\n\n    put(name: string, value: any) {\n        this._put(name, JSON.stringify({time: Date.now(), value: value}));\n    }\n\n    time(name: string) {\n        let obj = JSON.parse(this._get(name));\n        return obj.time;\n    }\n\n    fresh(name: string, time: Date) {\n        return this.has(name) && this.time(name) > time\n    }\n}\n\nexport const localStorageService = new LocalStorageService('stich');\n","import React, {useEffect} from \"react\";\r\nimport {Zoom, zoomSettings} from \"../types/zoom\";\r\nimport {actionTypes, initialState, mainReducer} from \"./reducer\";\r\nimport {StitchType, stitchTypes} from \"../types/stitch\";\r\nimport {localStorageService} from \"../services/localStorageService\";\r\nimport {SymbolType, symbolTypes} from \"../types/symbol\";\r\nimport {ViewType} from \"../types/viewType\";\r\n\r\nexport interface StoreType {\r\n    zoom: Zoom,\r\n    stitchType: StitchType\r\n    symbol: SymbolType\r\n    view: ViewType\r\n}\r\n\r\nexport interface DispatchType {\r\n    setZoom: (value: Zoom) => void,\r\n    setStitchType: (value: StitchType) => void,\r\n    setSymbol: (value: SymbolType) => void,\r\n    setView: (value: ViewType) => void,\r\n}\r\n\r\n// @ts-ignore\r\nexport const StoreContext = React.createContext<StoreType>();\r\n// @ts-ignore\r\nexport const DispatchContext = React.createContext<DispatchType>();\r\n\r\nexport const Store = ({children}: any) => {\r\n    const [state, dispatch] = React.useReducer(mainReducer, {\r\n        ...initialState,\r\n        zoom: localStorageService.get('zoom', initialState.zoom),\r\n        view: localStorageService.get('view', initialState.view),\r\n        stitchType: localStorageService.get('stitchType',initialState.stitchType),\r\n        symbol: localStorageService.get('symbol', initialState.symbol),\r\n    });\r\n    const actionList = React.useMemo(() => ({\r\n        setZoom: (value: Zoom) => dispatch({type: actionTypes.SET_ZOOM, value}),\r\n        setSymbol: (value: StitchType) => dispatch({type: actionTypes.SET_SYMBOL, value}),\r\n        setStitchType: (value: StitchType) => dispatch({type: actionTypes.SET_STITCH_TYPE, value}),\r\n        setView: (value: ViewType) => dispatch({type: actionTypes.SET_VIEW, value}),\r\n    }), [dispatch]);\r\n\r\n    useEffect(() => {\r\n        localStorageService.put('zoom', state.zoom);\r\n        localStorageService.put('view', state.view);\r\n        localStorageService.put('stitchType', state.stitchType);\r\n        localStorageService.put('symbol', state.symbol);\r\n    }, [state])\r\n\r\n    return (\r\n        <DispatchContext.Provider value={actionList}>\r\n            <StoreContext.Provider value={state}>\r\n                {children}\r\n            </StoreContext.Provider>\r\n        </DispatchContext.Provider>\r\n    )\r\n}\r\n","export interface Zoom {\r\n    scale: number;\r\n    scrollX: number,\r\n    scrollY: number,\r\n}\r\n\r\nexport const zoomSettings = {max: 20, min: 1, speed: 1.17};\r\n","export class ColorService {\r\n    getHexContrast(hex: string = '#fff', bw = true) {\r\n        if (hex.indexOf('#') === 0) {\r\n            hex = hex.slice(1);\r\n        }\r\n        if (hex.length === 3) {\r\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n        }\r\n        if (hex.length !== 6) {\r\n            throw new Error('Invalid HEX color.');\r\n        }\r\n        let r: any = parseInt(hex.slice(0, 2), 16),\r\n            g: any = parseInt(hex.slice(2, 4), 16),\r\n            b: any = parseInt(hex.slice(4, 6), 16);\r\n        if (bw) {\r\n            return (r * 0.299 + g * 0.587 + b * 0.114) > 186\r\n                ? '#000000'\r\n                : '#FFFFFF';\r\n        }\r\n        r = (255 - r).toString(16);\r\n        g = (255 - g).toString(16);\r\n        b = (255 - b).toString(16);\r\n        return \"#\" + this.padZero(r) + this.padZero(g) + this.padZero(b);\r\n    }\r\n\r\n    strRgbContrast(str: string = 'rgb(0,0,0)') {\r\n        return this.getHexContrast(this.strRgbToHex(str));\r\n    }\r\n\r\n    strRgbToHex(str: string) {\r\n        const matchColors = /rgb\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3})\\)/;\r\n        const match = matchColors.exec(str);\r\n        if (match && match[1] && match[2] && match[3]) {\r\n            return this.rgbToHex(parseInt(match[1]),parseInt(match[2]), parseInt(match[3]))\r\n        }\r\n        throw new Error('string is not rgba')\r\n    }\r\n\r\n    private padZero(str: string, len: number = 2) {\r\n        let zeros = new Array(len).join('0');\r\n        return (zeros + str).slice(-len);\r\n    }\r\n\r\n    private componentToHex(c: number) {\r\n        const hex = c.toString(16);\r\n        return hex.length == 1 ? \"0\" + hex : hex;\r\n    }\r\n\r\n    private rgbToHex(r: number, g: number, b: number) {\r\n        return \"#\" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\r\n    }\r\n}\r\n\r\nexport const colorService = new ColorService();\r\n","import React, {FunctionComponent, useEffect, useRef} from \"react\";\r\nimport './Scroll.scss'\r\nimport cls from 'classnames'\r\n\r\nexport interface ScrollPropsType {\r\n    horizontal?: boolean;\r\n    size?: number;\r\n    scroll: number;\r\n    onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\r\n}\r\n\r\nexport const Scroll: FunctionComponent<ScrollPropsType> =\r\n    ({horizontal = false, size = 0, onScroll, scroll}) => {\r\n        const ref = useRef<HTMLDivElement>(document.createElement('div'));\r\n        const overflow = ref.current ? ref.current[horizontal ? 'offsetWidth' : 'offsetHeight'] + size : 0;\r\n\r\n        useEffect(() => {\r\n            ref.current[!horizontal ? 'scrollTop' : 'scrollLeft'] = scroll;\r\n        }, [scroll])\r\n        return (\r\n\r\n            <div ref={ref} className={cls('scroll', {horizontal})} onScroll={onScroll}>\r\n                <div className=\"overflow\" style={{[horizontal ? 'width' : 'height']: overflow}}/>\r\n            </div>\r\n        )\r\n    }\r\n","import React from \"react\";\r\n\r\nexport const Child = ({children}: any) => {\r\n    return children;\r\n}\r\n","import React, {\r\n    FunctionComponent,\r\n    useCallback,\r\n    useContext,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState, WheelEvent,\r\n    WheelEventHandler\r\n} from \"react\";\r\nimport './Canvas.scss';\r\nimport {Cell} from \"../../types/cell\";\r\nimport {DispatchContext, StoreContext, StoreType} from \"../Store\";\r\nimport {Direction} from \"../../types/stitch\";\r\nimport {zoomSettings} from \"../../types/zoom\";\r\nimport {colorService} from \"../../services/colorService\";\r\nimport {Project} from \"../../types/project\";\r\nimport {Scroll} from \"../Scroll/Scroll\";\r\nimport {Child} from \"../Child\";\r\n\r\nexport interface CanvasPropsType {\r\n    project: Project;\r\n    onCellClick?: (rowIndex: number, cellIndex: number, direction: Direction, contextMenu: boolean) => void\r\n}\r\n\r\nexport const CELL_SIZE = 4;\r\n\r\nexport const Canvas: FunctionComponent<CanvasPropsType> = ({\r\n                                                               project,\r\n                                                               onCellClick\r\n                                                           }) => {\r\n    const {zoom, view} = useContext(StoreContext);\r\n    const {setZoom} = useContext(DispatchContext);\r\n    const [size, setSize] = useState<{ height: number, width: number }>({height: 0, width: 0});\r\n    const ref = useRef<HTMLCanvasElement>(document.createElement('canvas'));\r\n\r\n    const zoomed = useCallback((number: number) => Math.floor(number * zoom.scale), [zoom.scale]);\r\n    const scrolledX = useCallback((number: number) => Math.floor(number - zoom.scrollX), [zoom.scrollX]);\r\n    const scrolledY = useCallback((number: number) => Math.floor(number - zoom.scrollY), [zoom.scrollY]);\r\n\r\n    const cellSize = useMemo(() => zoomed(CELL_SIZE), [zoomed]);\r\n    const {grid, palette} = project;\r\n\r\n    const aidaImgEl = document.querySelector('#aida') as HTMLImageElement;\r\n    const counterImgEl = document.querySelector('#counter') as HTMLImageElement;\r\n    const image = useMemo(() => {\r\n        if (project.picture && project.picture.data) {\r\n            const image = new Image();\r\n            image.src = project.picture.data;\r\n            return image;\r\n        }\r\n        return null;\r\n    }, [project.picture])\r\n    let wheelTimeOut: any;\r\n\r\n\r\n    function resize() {\r\n        const parent = ref.current.parentElement;\r\n        if (parent) {\r\n            setSize({height: parent.offsetHeight, width: parent.offsetWidth})\r\n        }\r\n    }\r\n\r\n    function clickHandler(event: React.MouseEvent<HTMLCanvasElement>, contextMenu = false) {\r\n        event.preventDefault();\r\n        const refRect = ref.current.getBoundingClientRect();\r\n        const cellX = (event.pageX - refRect.left + zoom.scrollX) / cellSize\r\n        const rowY = (event.pageY - refRect.top + zoom.scrollY) / cellSize\r\n        const cellIndex = Math.floor(cellX);\r\n        const rowIndex = Math.floor(rowY);\r\n        const direction = (rowY - rowIndex > .5 ? 'b' : 't') + (cellX - cellIndex > .5 ? 'r' : 'l') as Direction;\r\n        if (rowIndex <= project.height && cellIndex <= project.width) {\r\n            onCellClick && onCellClick(rowIndex, cellIndex, direction, contextMenu)\r\n        }\r\n    }\r\n\r\n    function drawCell(ctx: CanvasRenderingContext2D, cell: Cell, cellIndex: number, rowIndex: number) {\r\n        let zX = scrolledX(cellIndex * cellSize);\r\n        let zY = scrolledY(rowIndex * cellSize);\r\n        let cellHeight = cellSize, cellWidth = cellSize;\r\n        const color = palette[cell.symbol].color;\r\n        if (zX > size.width || zY > size.height) {\r\n            return;\r\n        }\r\n        const contrastColor = colorService.strRgbContrast(color);\r\n        const directions = cell.stitch.direction.split('');\r\n        directions.forEach(direction => {\r\n            switch (direction) {\r\n                case \"t\":\r\n                    cellHeight /= 2;\r\n                    break;\r\n                case \"b\":\r\n                    zY += cellWidth / 2;\r\n                    cellHeight /= 2;\r\n                    break;\r\n                case \"l\":\r\n                    cellWidth /= 2;\r\n                    break;\r\n                case \"r\":\r\n                    zX += cellWidth / 2;\r\n                    cellWidth /= 2;\r\n                    break;\r\n            }\r\n        })\r\n\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(zX, zY, cellWidth, cellHeight);\r\n    }\r\n\r\n    function drawSymbol(ctx: CanvasRenderingContext2D, x: number, y: number, color: string, symbol: string,) {\r\n        const fontSize = cellSize / 1.5;\r\n        ctx.fillStyle = color;\r\n        ctx.shadowBlur = 0;\r\n        ctx.font = `${fontSize}px Arial`;\r\n        ctx.fillText(symbol, x, y)\r\n    }\r\n\r\n    function drawCells(ctx: CanvasRenderingContext2D) {\r\n        Object.keys(grid).forEach((rowIndex: any) => {\r\n            Object.keys(grid[rowIndex]).forEach((colIndex: any) => {\r\n                const cell = grid[rowIndex][colIndex];\r\n                drawCell(ctx, cell, colIndex, rowIndex);\r\n            })\r\n        })\r\n    }\r\n\r\n    function drawBackGround(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(scrolledX(0), scrolledY(0), project.width * cellSize, project.height * cellSize);\r\n        if (view === 'aida' || view === 'count') {\r\n            let i = 0;\r\n            while (i < project.height) {\r\n                let j = 0;\r\n                while (j < project.width) {\r\n                    ctx.drawImage(view === 'aida' ? aidaImgEl : counterImgEl,\r\n                        scrolledX(j * cellSize),\r\n                        scrolledY(i * cellSize),\r\n                        cellSize,\r\n                        cellSize)\r\n                    j++;\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        ctx.fillStyle = `${project.color}88`;\r\n        ctx.fillRect(scrolledX(0), scrolledY(0), project.width * cellSize, project.height * cellSize);\r\n    }\r\n\r\n    function drawGrid(ctx: CanvasRenderingContext2D) {\r\n        const gridSize = 10;\r\n        let i = 0;\r\n        let j = 0;\r\n        const strokeStyle = `rgba(0,0,0,${(zoom.scale - zoomSettings.min) / 2})`;\r\n        const strokeStyleBold = `rgba(0,0,0,${zoom.scale / 2})`;\r\n        while (i <= project.height) {\r\n            ctx.lineWidth = zoom.scale - zoomSettings.min;\r\n            ctx.lineWidth = i % gridSize ? 1 : 2;\r\n            ctx.strokeStyle = i % gridSize ? strokeStyle : strokeStyleBold;\r\n            ctx.beginPath();\r\n            ctx.moveTo(scrolledX(0), scrolledY(i * cellSize));\r\n            ctx.lineTo(scrolledX(project.width * cellSize), scrolledY(i * cellSize));\r\n            ctx.stroke();\r\n            i++;\r\n        }\r\n        while (j <= project.width) {\r\n            ctx.lineWidth = j % gridSize ? 1 : 2;\r\n            ctx.strokeStyle = j % gridSize ? strokeStyle : strokeStyleBold;\r\n            ctx.beginPath();\r\n            ctx.moveTo(scrolledX(j * cellSize), scrolledY(0));\r\n            ctx.lineTo(scrolledX(j * cellSize), scrolledY(project.height * cellSize));\r\n            ctx.stroke();\r\n            j++;\r\n        }\r\n    }\r\n\r\n    function drawPicture(ctx: CanvasRenderingContext2D) {\r\n        const {picture} = project;\r\n        if (image && picture) {\r\n            ctx.globalAlpha = picture.opacity;\r\n            ctx.drawImage(\r\n                image,\r\n                scrolledX(picture.left * cellSize),\r\n                scrolledY(picture.top * cellSize),\r\n                picture.sWidth * cellSize,\r\n                picture.sHeight * cellSize\r\n            );\r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n\r\n    function drawAll() {\r\n        const ctx = getCtx();\r\n        ctx.clearRect(0, 0, size.width, size.height);\r\n        drawBackGround(ctx);\r\n        drawPicture(ctx);\r\n        drawCells(ctx);\r\n        if (view === 'grid') drawGrid(ctx);\r\n    }\r\n\r\n    function getCtx(): CanvasRenderingContext2D {\r\n        // @ts-ignore\r\n        return ref.current.getContext('2d');\r\n    }\r\n\r\n    function wheel(e: React.WheelEvent<HTMLCanvasElement>) {\r\n        clearTimeout(wheelTimeOut);\r\n        const {shiftKey, altKey, deltaY} = e;\r\n        wheelTimeOut = setTimeout(() => {\r\n            const delta = deltaY < 0 ? -150 : 150;\r\n            if (altKey) {\r\n                const {scale} = zoom;\r\n                const newScale = (delta < 0 ? Math.min(zoomSettings.max, scale * zoomSettings.speed) : Math.max(zoomSettings.min, scale * (1 / zoomSettings.speed)));\r\n                if (newScale !== scale) {\r\n                    setZoom({\r\n                        scrollX: 0,\r\n                        scrollY: 0,\r\n                        scale: newScale,\r\n                    });\r\n                }\r\n            } else {\r\n                if (project) {\r\n                    if (shiftKey) {\r\n                        if (project.width * cellSize > size.width) {\r\n                            const maxScrollX = project.width * cellSize - size.width;\r\n                            const newScrollX = zoom.scrollX + delta;\r\n                            setZoom({\r\n                                ...zoom,\r\n                                scrollX: 0 > newScrollX ? 0 : newScrollX >= maxScrollX ? maxScrollX : newScrollX\r\n                            })\r\n                        }\r\n                    } else {\r\n                        if (project.height * cellSize > size.height) {\r\n                            const maxScrollY = project.height * cellSize - size.height;\r\n                            const newScrollY = zoom.scrollY + delta;\r\n                            setZoom({\r\n                                ...zoom,\r\n                                scrollY: 0 > newScrollY ? 0 : newScrollY >= maxScrollY ? maxScrollY : newScrollY\r\n                            })\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }, 30)\r\n    }\r\n\r\n    function scrollHandler(x = true, event: React.UIEvent<HTMLDivElement>) {\r\n        const scroll = event.currentTarget[x ? 'scrollLeft' : 'scrollTop'];\r\n        setZoom({...zoom, [x ? 'scrollX' : 'scrollY']: scroll});\r\n    }\r\n\r\n    useEffect(() => {\r\n        resize();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        drawAll();\r\n    }, [project, size, zoom, view]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', resize);\r\n        return () => {\r\n            window.removeEventListener('resize', resize);\r\n        }\r\n    }, [project]);\r\n\r\n\r\n    return (\r\n        <Child>\r\n            <Scroll scroll={zoom.scrollY} onScroll={e => scrollHandler(false, e)}\r\n                    size={cellSize * project.height - size.height}/>\r\n            <div className=\"scrollContainer\">\r\n                <div className=\"canvasContainer\">\r\n                    <canvas onWheel={wheel} onContextMenu={e => clickHandler(e, true)}\r\n                            onClick={clickHandler}\r\n                            height={size.height}\r\n                            width={size.width}\r\n                            ref={ref}\r\n                            className=\"Canvas\"/>\r\n                </div>\r\n                <Scroll scroll={zoom.scrollX} onScroll={e => scrollHandler(true, e)}\r\n                        size={cellSize * project.width - size.width}\r\n                        horizontal={true}/>\r\n            </div>\r\n        </Child>\r\n    )\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\nimport './Panel.scss'\r\nimport cls from 'classnames';\r\n\r\nexport interface PanelType {\r\n    vertical?: boolean;\r\n    size?: number;\r\n    border?: 'Left' | 'Right' | 'Top' | 'Bottom';\r\n}\r\n\r\nexport const Panel: FunctionComponent<PanelType> =\r\n    ({\r\n         vertical,\r\n         children,\r\n         size,\r\n         border = 'Bottom'\r\n     }) => {\r\n        const style: any = {};\r\n        if (size) {\r\n            style[vertical ? 'width' : 'height'] = size;\r\n        }\r\n        if (border) {\r\n            style['border' + border] = '1px solid #cecece'\r\n        }\r\n        return (\r\n            <div style={style} className={cls({vertical}, 'Panel', 'p-1')}>{children}</div>\r\n        )\r\n    }\r\n\r\n","import React, {FunctionComponent, useCallback, useContext} from \"react\";\r\nimport './Palette.scss'\r\nimport {PaletteType} from \"../../types/paletteType\";\r\nimport cls from 'classnames'\r\nimport {colorService} from \"../../services/colorService\";\r\nimport {DispatchContext, StoreContext} from \"../Store\";\r\nimport {SymbolType, symbolTypes} from \"../../types/symbol\";\r\nimport {Thread} from \"../../types/thread\";\r\n\r\nexport interface PalettePropsType {\r\n    onDoubleClick?: (symbol: SymbolType) => void,\r\n    palette: PaletteType\r\n}\r\n\r\nexport const Palette: FunctionComponent<PalettePropsType> = ({palette, onDoubleClick}) => {\r\n    const {symbol: selectedSymbol} = useContext(StoreContext);\r\n    const {setSymbol} = useContext(DispatchContext);\r\n    return (\r\n        <div className=\"Palette\">\r\n            {symbolTypes\r\n                .sort((a, b) => {\r\n                    const threadA = palette[a];\r\n                    const threadB = palette[b];\r\n                    if (!!threadA && !!threadB || !threadA && !threadB) return a > b ? -1 : 1;\r\n                    return threadA ? -1 : 1;\r\n                })\r\n                .map((symbol, index) => {\r\n                        const thread: Thread | undefined = palette[symbol];\r\n                        const contrastColor = thread ? colorService.strRgbContrast(thread.color) : 'black';\r\n                        const style = {borderColor: contrastColor, color: contrastColor, backgroundColor: thread?.color}\r\n                        return (\r\n                            <div className={cls('colorBox', {selected: selectedSymbol == symbol})}\r\n                                 key={index}\r\n                                 style={style}\r\n                                 title={thread && (thread.vendor + ' ' + thread.name)}\r\n                                 onDoubleClick={e => onDoubleClick && onDoubleClick(symbol)}\r\n                                 onContextMenu={e => {\r\n                                     e.preventDefault();\r\n                                     onDoubleClick && onDoubleClick(symbol)\r\n                                 }}\r\n                                 onClick={e => setSymbol(symbol)}>\r\n                                {symbol}\r\n                            </div>\r\n                        )\r\n                    }\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n","import anchor from '../assets/threads/anchor.json'\r\nimport dmc from '../assets/threads/dmc.json'\r\nimport gamma from '../assets/threads/gamma.json'\r\nimport maderia from '../assets/threads/maderia.json'\r\n\r\nexport interface Thread {\r\n    color: string;\r\n    name: string;\r\n    vendor: string;\r\n}\r\n\r\nexport const vendors: { [key: string]: Thread[] } = {\r\n    anchor: anchor.map(t => ({...t, vendor: 'anchor'})),\r\n    dmc: dmc.map(t => ({...t, vendor: 'dmc'})),\r\n    gamma: gamma.map(t => ({...t, vendor: 'gamma'})),\r\n    maderia: maderia.map(t => ({...t, vendor: 'maderia'})),\r\n} as any;\r\n","import React, {FunctionComponent, useEffect, useMemo, useState} from \"react\";\r\nimport {Thread, vendors} from \"../../types/thread\";\r\nimport cls from 'classnames';\r\nimport './PaletteEdit.scss';\r\nimport {colorService} from \"../../services/colorService\";\r\n\r\nexport interface PaletteEditType {\r\n    thread?: Thread,\r\n    onSave?: (thread: Thread) => void\r\n    onCancel?: () => void\r\n    onDelete?: () => void\r\n    edit?: boolean\r\n}\r\n\r\nexport const PaletteEdit: FunctionComponent<PaletteEditType> =\r\n    ({\r\n         thread,\r\n         onSave,\r\n         onCancel,\r\n         onDelete\r\n     }) => {\r\n        const [vendor, setVendor] = useState(thread?.vendor || Object.keys(vendors)[0])\r\n        const [search, setSearch] = useState<string>('')\r\n        const [selectedThread, setThread] = useState<Thread>(thread || vendors[vendor][0]);\r\n\r\n        useEffect(() => {\r\n            if (thread) {\r\n                setVendor(thread.vendor as string)\r\n            }\r\n        }, [thread])\r\n\r\n        function deleteHandler() {\r\n            if (window.confirm('Do you really want to delete thread from project?')) {\r\n                onDelete && onDelete();\r\n            }\r\n        }\r\n\r\n        const threads = useMemo(() => vendors[vendor].filter(thread => !search.length || thread.name.indexOf(search) !== -1), [vendor, search])\r\n\r\n        return (\r\n            <div className=\"PaletteEdit\">\r\n                <hr/>\r\n                <label>Vendor</label>\r\n                <select value={vendor} onChange={e => setVendor(e.target.value)}>\r\n                    {Object.keys(vendors).map(vendor =>\r\n                        <option key={vendor} value={vendor}>{vendor}</option>)}\r\n                </select>\r\n                <hr/>\r\n                <label>Threads</label>\r\n                <input placeholder='search code...' value={search} onChange={e => setSearch(e.target.value)}/>\r\n                <div className=\"threadContainer\">\r\n                    {threads.map((thread, key) => {\r\n                            const color = colorService.strRgbContrast(thread.color);\r\n                            return (\r\n                                <div\r\n                                    style={{\r\n                                        borderColor: color,\r\n                                        backgroundColor: thread.color,\r\n                                        color: color\r\n                                    }}\r\n                                    onClick={e => setThread(thread)}\r\n                                    onDoubleClick={e => onSave && onSave(thread)}\r\n                                    key={key}\r\n                                    className={cls('thread', {selected: thread.name === selectedThread?.name})}>\r\n                                    {thread.name}\r\n                                </div>\r\n                            )\r\n                        }\r\n                    )}\r\n                </div>\r\n                <hr/>\r\n                <button onClick={e => onSave && onSave(selectedThread)}>Save</button>\r\n                <button onClick={e => onCancel && onCancel()}>Cancel</button>\r\n                <button onClick={deleteHandler}>Delete</button>\r\n            </div>\r\n        )\r\n    }\r\n","import React, {FunctionComponent, useContext, useEffect, useMemo, useState} from \"react\";\r\nimport {Panel} from \"../Panel/Panel\";\r\nimport {Palette} from \"../Palette/Palette\";\r\nimport {PaletteType} from \"../../types/paletteType\";\r\nimport {PaletteEdit} from \"../PaleteEdit/PaletteEdit\";\r\nimport {SymbolType, symbolTypes} from \"../../types/symbol\";\r\nimport {Thread} from \"../../types/thread\";\r\nimport {Modal} from \"react-bootstrap\";\r\n\r\nexport interface RightPanelType {\r\n    onChange: (palette: PaletteType) => void,\r\n    onDelete: (symbol: SymbolType) => void,\r\n    palette: PaletteType\r\n}\r\n\r\nexport const LeftPanel: FunctionComponent<RightPanelType> = ({palette = {}, onChange, onDelete}) => {\r\n    const [modalOpened, setModalOpened] = useState(false);\r\n    const [editSymbol, setEditSymbol] = useState<SymbolType>(symbolTypes[0]);\r\n\r\n    function saveHandler(thread: Thread) {\r\n        onChange({...palette, [editSymbol]: thread});\r\n        setModalOpened(false)\r\n    }\r\n\r\n    function deleteHandler() {\r\n        onDelete(editSymbol);\r\n        setModalOpened(false)\r\n    }\r\n\r\n    function editHandler(symbol: SymbolType) {\r\n        setEditSymbol(symbol);\r\n        setModalOpened(true);\r\n    }\r\n\r\n    return (\r\n        <Panel size={82} vertical={true} border={\"Right\"}>\r\n            <Palette palette={palette} onDoubleClick={editHandler}/>\r\n            <Modal show={modalOpened} onHide={() => setModalOpened(false)}>\r\n                <Modal.Body>\r\n                    <PaletteEdit thread={palette[editSymbol]}\r\n                                 onSave={saveHandler}\r\n                                 onCancel={() => setModalOpened(false)}\r\n                                 onDelete={deleteHandler}/>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </Panel>\r\n    )\r\n}\r\n","import React, {useContext} from \"react\";\r\nimport {DispatchContext, StoreContext} from \"../Store\";\r\nimport {viewTypes} from \"../../types/viewType\";\r\nimport {Button, ButtonGroup} from \"react-bootstrap\";\r\n\r\nexport const ViewToolBar = () => {\r\n    const {view: currentView} = useContext(StoreContext);\r\n    const {setView} = useContext(DispatchContext)\r\n\r\n    return (\r\n        <ButtonGroup className={'mr-1'}>\r\n            {viewTypes.map((viewType, key) =>\r\n                <Button size={\"sm\"} key={key} active={viewType === currentView}\r\n                        onClick={() => setView(viewType)}>\r\n                    {viewType}\r\n                </Button>\r\n            )}\r\n        </ButtonGroup>\r\n    )\r\n}\r\n","export const backColors = [\r\n    '#ffffff',\r\n    '#e5d9c2',\r\n    '#b3c2cc',\r\n    '#cfe3cf',\r\n    '#e3bdbd',\r\n    '#c4c4c4',\r\n    '#b88c82',\r\n    '#e5122b',\r\n    '#005e33',\r\n    '#474747',\r\n    '#2b4269',\r\n    '#c7d1d4',\r\n]\r\n","import React, {FunctionComponent, useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport './ImageEdit.scss'\r\nimport {Picture, Project} from \"../../types/project\";\r\nimport {Button, Form} from \"react-bootstrap\";\r\n\r\nexport interface ImageEditProps {\r\n    onChange: (picture?: Picture) => void;\r\n    project: Project\r\n}\r\n\r\nexport const ImageEdit: FunctionComponent<ImageEditProps> = ({project, onChange}) => {\r\n\r\n    const newPicture = {height: 0, width: 0, left: 0, top: 0, sWidth: 0, sHeight: 0, opacity: .5};\r\n    const [picture, setPicture] = useState<Picture>(newPicture);\r\n    const [lock, setLock] = useState(true)\r\n    const aspect = useMemo(() => picture.width / picture.height, [picture])\r\n    const maxSize = useMemo(() => ({\r\n        width: aspect < 1 ? project.height : Math.floor(project.width / aspect),\r\n        height: aspect >= 1 ? project.width : Math.floor(aspect * project.height)\r\n    }), [aspect, picture])\r\n\r\n    function fileChange(e: any) {\r\n        const {target: {files: [file]}} = e;\r\n        if (file as File) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                if (e.target) {\r\n                    const image = new Image();\r\n                    image.onload = () => {\r\n                        if (e.target) {\r\n                            const aspect = image.width / image.height;\r\n                            setPicture({\r\n                                ...picture,\r\n                                data: e.target.result as string,\r\n                                left: 0, top: 0, height: image.height, width: image.width,\r\n                                sHeight: aspect >= 1 ? project.width : Math.floor(aspect * project.height),\r\n                                sWidth: aspect < 1 ? project.height : Math.floor(project.width / aspect),\r\n                            })\r\n                        }\r\n                    }\r\n                    image.src = e.target.result as string;\r\n                }\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    function changeSize(size: number, prop: string) {\r\n        const newSize = {[prop]: size};\r\n        if (lock) {\r\n            newSize[(prop === 'sWidth' ? 'sHeight' : 'sWidth')] = prop === 'sWidth' ? Math.floor(size / aspect) : Math.floor(size * aspect);\r\n        }\r\n        setPicture({...picture, ...newSize})\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (project.picture) {\r\n            setPicture(project.picture);\r\n        }\r\n    }, [project.picture])\r\n\r\n    return (\r\n        <div className={'ImageEdit'}>\r\n            {picture.data && <img src={picture.data}/>}\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.File accept=\"image/*\" label=\"Image\" onChange={fileChange}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Check label={'Lock aspect ratio'}\r\n                                checked={lock}\r\n                                onChange={() => setLock(!lock)}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Height</Form.Label>\r\n                    <Form.Control type={'number'}\r\n                                  min={0}\r\n                                  max={maxSize.height}\r\n                                  value={picture.sHeight}\r\n                                  onChange={e => changeSize(parseInt(e.target.value), 'sHeight')}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Width</Form.Label>\r\n                    <Form.Control type={'number'}\r\n                                  min={0}\r\n                                  max={maxSize.width}\r\n                                  value={picture.sWidth}\r\n                                  onChange={e => changeSize(parseInt(e.target.value), 'sWidth')}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>offset X</Form.Label>\r\n                    <Form.Control type={'number'}\r\n                                  min={0}\r\n                                  max={maxSize.width}\r\n                                  value={picture.left}\r\n                                  onChange={e => setPicture({...picture, left: parseInt(e.target.value)})}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>offset Y</Form.Label>\r\n                    <Form.Control type={'number'}\r\n                                  min={0}\r\n                                  max={maxSize.height}\r\n                                  value={picture.top}\r\n                                  onChange={e => setPicture({...picture, top: parseInt(e.target.value)})}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Opacity %</Form.Label>\r\n                    <Form.Control type={'number'}\r\n                                  min={0}\r\n                                  max={100}\r\n                                  value={Math.floor(picture.opacity * 100)}\r\n                                  onChange={e => setPicture({...picture, opacity: parseInt(e.target.value) / 100})}/>\r\n                </Form.Group>\r\n            </Form>\r\n            <Button onClick={() => onChange({...picture})}>Save</Button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FunctionComponent, useRef, useState} from \"react\";\r\nimport {Button, ButtonGroup, Modal, Overlay} from \"react-bootstrap\";\r\nimport {ChromePicker, GithubPicker} from 'react-color';\r\nimport {backColors} from \"../../types/backColors\";\r\nimport {Picture, Project} from \"../../types/project\";\r\nimport {ImageEdit} from \"../ImageEdit/ImageEdit\";\r\n\r\nexport interface BackToolBarType {\r\n    onChangeColor: (color: string) => void,\r\n    onChangePicture: (picture?: Picture) => void,\r\n    project: Project;\r\n}\r\n\r\nexport const BackToolBar: FunctionComponent<BackToolBarType> = ({onChangeColor, project, onChangePicture}) => {\r\n\r\n    const colorRef = useRef<any>(null);\r\n    const colorCustomRef = useRef<any>(null);\r\n    const [modal, setModal] = useState<'custom' | 'color' | 'image' | null>(null);\r\n\r\n    return (\r\n        <ButtonGroup>\r\n            <Button onClick={() => setModal('color')} ref={colorRef} size={\"sm\"}>Color</Button>\r\n            <Overlay target={colorRef.current}\r\n                     placement={'bottom-start'}\r\n                     rootClose={true}\r\n                     show={modal === 'color'}\r\n                     onHide={() => setModal(null)}>\r\n                {(props: any) => (\r\n                    <div {...props} style={{...props.style, top: 6,}}>\r\n                        <GithubPicker colors={backColors} onChange={color => {\r\n                            setModal(null);\r\n                            onChangeColor(color.hex)\r\n                        }}/>\r\n                    </div>\r\n                )}\r\n            </Overlay>\r\n            <Button onClick={() => setModal('custom')} ref={colorCustomRef} size={\"sm\"}>Custom Color</Button>\r\n            <Overlay target={colorCustomRef.current}\r\n                     rootClose={true}\r\n                     onHide={() => setModal(null)}\r\n                     placement={'bottom-start'}\r\n                     show={modal === 'custom'}>\r\n                {(props: any) => (\r\n                    <div {...props} style={{...props.style, top: 6,}}>\r\n                        <ChromePicker\r\n                            color={project.color}\r\n                            disableAlpha={true}\r\n                            onChangeComplete={color => onChangeColor(color.hex)}/>\r\n                    </div>\r\n                )}\r\n            </Overlay>\r\n            <Button size={\"sm\"} onClick={() => setModal('image')}>Image</Button>\r\n            <Modal show={modal === 'image'} onHide={() => setModal(null)}>\r\n                <Modal.Body>\r\n                    <ImageEdit project={project} onChange={picture => {\r\n                        setModal(null);\r\n                        onChangePicture(picture);\r\n                    }}/>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </ButtonGroup>\r\n    );\r\n}\r\n","import React, {FunctionComponent, useContext} from \"react\";\r\nimport {Panel} from \"../Panel/Panel\";\r\nimport {stitchTypes} from \"../../types/stitch\";\r\nimport {DispatchContext, StoreContext} from \"../Store\";\r\nimport {ViewToolBar} from \"../ViewToolBar/ViewToolBar\";\r\nimport {BackToolBar, BackToolBarType} from \"../BackPanel/BackToolBar\";\r\nimport {Button, ButtonGroup} from \"react-bootstrap\";\r\n\r\nexport type TopPanelType = {} & BackToolBarType\r\n\r\nexport const TopPanel: FunctionComponent<TopPanelType> = ({onChangeColor, project, onChangePicture}) => {\r\n\r\n    const {setStitchType} = useContext(DispatchContext);\r\n    const {stitchType} = useContext(StoreContext);\r\n\r\n    return (\r\n        <Panel>\r\n            <ButtonGroup className={\"mr-1\"}>\r\n                {stitchTypes.map((type, index) =>\r\n                    <Button size={\"sm\"}\r\n                            active={type === stitchType}\r\n                            key={index}\r\n                            onClick={() => setStitchType(type)}>\r\n                        {type}\r\n                    </Button>\r\n                )}\r\n            </ButtonGroup>\r\n            <ViewToolBar/>\r\n            <BackToolBar project={project}\r\n                         onChangeColor={onChangeColor}\r\n                         onChangePicture={onChangePicture}\r\n            />\r\n        </Panel>\r\n    )\r\n}\r\n","import React, {useCallback, useContext, useEffect, useRef, useState} from 'react';\nimport './Editor.scss';\nimport {GridType, Project} from \"../../types/project\";\nimport {Panel} from \"../Panel/Panel\";\nimport {Canvas} from \"../Canvas/Canvas\";\nimport {useParams, useHistory} from \"react-router-dom\";\nimport {projectService} from \"../../services/dataService\";\nimport {StoreContext} from \"../Store\";\nimport {LeftPanel} from \"../RightPanel/LeftPanel\";\nimport {TopPanel} from \"../TopPanel/TopPanel\";\nimport {Direction, Stitch, StitchType} from \"../../types/stitch\";\nimport {SymbolType} from \"../../types/symbol\";\n\nexport const Editor = () => {\n    const [project, setProject] = useState<Project>();\n    const {id} = useParams();\n    const history = useHistory();\n    const {symbol, stitchType} = useContext(StoreContext);\n\n\n    function deleteThreadHandler(symbol: SymbolType) {\n        if (project) {\n            Object.keys(project.grid).forEach((rowIndex: any) => {\n                Object.keys(project.grid[rowIndex]).forEach((colIndex: any) => {\n                    const cell = project.grid[rowIndex][colIndex];\n                    if (cell && cell.symbol === symbol) {\n                        deleteCell(project.grid, rowIndex, colIndex)\n                    }\n                })\n            })\n            const newPalette = {...project.palette}\n            delete newPalette[symbol];\n            setProject({...project, palette: newPalette, grid: {...project.grid}} as Project);\n\n        }\n    }\n\n    function deleteCell(grid: GridType, rowIndex: number, colIndex: number): GridType {\n        delete grid[rowIndex][colIndex];\n        if (Object.keys(grid[rowIndex]).length === 0) {\n            delete grid[rowIndex];\n        }\n        return grid;\n    }\n\n    function cellClickHandler(rowIndex: number, colIndex: number, direction: Direction, contextMenu: boolean) {\n        if (!project) return\n        const newGrid = {...project.grid};\n        if (!newGrid[rowIndex]) newGrid[rowIndex] = {};\n        if (symbol && project.palette[symbol]) {\n            if (!contextMenu) {\n                newGrid[rowIndex][colIndex] = {\n                    symbol: symbol,\n                    stitch: newStitch(direction)\n                }\n            } else {\n                deleteCell(newGrid, rowIndex, colIndex)\n            }\n            setProject({...project, grid: newGrid} as Project);\n        }\n    }\n\n    function changeColorHandler(color: string) {\n        setProject({...project, color} as Project)\n    }\n\n    const newStitch = useCallback((clickDirection: Direction): Stitch => {\n        let direction: Direction = 'f';\n        switch (stitchType as StitchType) {\n            case 'x':\n                direction = 'f';\n                break;\n            case 'vx':\n                direction = clickDirection.indexOf('l') !== -1 ? 'l' : 'r';\n                break;\n            case 'hx':\n                direction = clickDirection.indexOf('t') !== -1 ? 't' : 'b';\n                break;\n            case 'sx':\n            case 'qx':\n            case '3qx':\n                direction = clickDirection;\n                break;\n        }\n        return {type: stitchType, direction}\n    }, [stitchType])\n\n    useEffect(() => {\n        projectService.get(id).then(res => {\n            if (res) {\n                setProject(res)\n            } else {\n                history.push('');\n            }\n        });\n    }, [])\n\n    useEffect(() => {\n        if (project) projectService.save(project).then(() => console.log('saved'))\n    }, [project])\n\n    if (!project) return null;\n\n    return (\n        <div className=\"editor\">\n            <TopPanel project={project}\n                      onChangePicture={picture => setProject({...project, picture} as Project)}\n                      onChangeColor={changeColorHandler}/>\n            <div className=\"mainArea\">\n                <LeftPanel palette={project.palette}\n                           onChange={palette => setProject({...project, palette} as Project)}\n                           onDelete={deleteThreadHandler}\n                />\n                <Canvas project={project}\n                        onCellClick={cellClickHandler}/>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route, HashRouter\r\n} from \"react-router-dom\";\r\nimport {ProjectEdit} from \"./ProjectEdit/ProjectEdit\";\r\nimport {Home} from \"./Home/Home\";\r\nimport {Editor} from \"./Editor/Editor\";\r\nimport {Store} from \"./Store\";\r\n\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Store>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route path=\"/edit/:id?\">\r\n                        <ProjectEdit/>\r\n                    </Route>\r\n                    <Route path=\"/draw/:id\">\r\n                        <Editor/>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Home/>\r\n                    </Route>\r\n                </Switch>\r\n            </HashRouter>\r\n        </Store>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {App} from \"./components/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}